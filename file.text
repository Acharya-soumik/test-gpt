             when (transaction.type) {
                BasicTransactionResponseModel.TRANSACTION_TYPE_USER_TO_USER -> {
                    var userToDisplay: User?
                    if (transaction.isMe) {
                        userToDisplay = transaction.user
                        isAmountCredited = false
                        amountColor = Color.parseColor("#FFFCFC") // White
                    } else {
                        userToDisplay = transaction.createdBy
                        amountColor = transaction.getColorByStatus(baseActivity)
                    }
                    title = userToDisplay.name()
                    ImageUtils.loadImage(
                        baseActivity,
                        userToDisplay.avatar,
                        userImageView,
                        true,
                        userToDisplay.firstName
                    )
                    userImageView.setOnClickListener {
                        baseActivity.navigateToUserProfile(userToDisplay.username, Source.TXN_CARD)
                    }
                }
                BasicTransactionResponseModel.TRANSACTION_TYPE_USER_TO_EXTERNAL -> {
                    isAmountCredited = false
                    transaction.externalSourceModel?.let {
                        when (it.type) {
                            ExternalSourceModel.SOURCE_TYPE_VPA -> {
                                title = it.vpa.getName()
                                it.vpa.loadVpaImage(baseActivity, userImageView)
                            }
                            ExternalSourceModel.SOURCE_TYPE_BANK_ACCOUNT -> {
                                title = it.bankAccountModel.accountHolderName
                                userImageView.setImageResource(R.drawable.ic_bank_new)
                            }
                            ExternalSourceModel.SOURCE_TYPE_MERCHANT -> {
                                title = it.merchant.name
                                ImageUtils.loadImage(
                                    baseActivity,
                                    it.merchant.icon,
                                    userImageView,
                                    R.drawable.ic_shop_new
                                )
                            }
                        }
                    }
                }
                BasicTransactionResponseModel.TRANSACTION_TYPE_EXTERNAL_TO_USER -> {
                    transaction.externalSourceModel?.let {
                        when (it.type) {
                            ExternalSourceModel.SOURCE_TYPE_UPI_APP,
                            ExternalSourceModel.SOURCE_TYPE_NETBANKING,
                            ExternalSourceModel.SOURCE_TYPE_SAVED_CARD,
                            ExternalSourceModel.SOURCE_TYPE_CARD -> {
                                title = transaction.createdBy.name()
                                ImageUtils.loadImage(
                                    baseActivity,
                                    transaction.createdBy.avatar,
                                    userImageView,
                                    true,
                                    transaction.createdBy.firstName
                                )
                                userImageView.setOnClickListener {
                                    baseActivity.navigateToUserProfile(
                                        transaction.createdBy.username,
                                        Source.TXN_CARD
                                    )
                                }
                            }
                            ExternalSourceModel.SOURCE_TYPE_VPA -> {
                                if (BasicTransactionResponseModel.MODE_UPI == transaction.mode) {
                                    title = transaction.externalSourceModel.vpa.getName()
                                    transaction.externalSourceModel.vpa.loadVpaImage(
                                        baseActivity, userImageView
                                    )
                                } else {
                                    title = transaction.createdBy.name()
                                    ImageUtils.loadImage(
                                        baseActivity,
                                        transaction.createdBy.avatar,
                                        userImageView,
                                        true,
                                        transaction.createdBy.firstName
                                    )
                                    userImageView.setOnClickListener {
                                        baseActivity.navigateToUserProfile(
                                            transaction.createdBy.username,
                                            Source.TXN_CARD
                                        )
                                    }
                                }
                            }
                            ExternalSourceModel.SOURCE_TYPE_MERCHANT -> {
                                title = it.merchant.name
                                ImageUtils.loadImage(
                                    baseActivity,
                                    transaction.externalSourceModel.merchant.icon,
                                    userImageView,
                                    R.drawable.ic_shop_new
                                )
                            }
                        }
                    }
                }
                BasicTransactionResponseModel.TRANSACTION_TYPE_PERSONAL_TO_SAVINGS -> {
                    isAmountCredited = false
                    if (transaction.isMe) {
                        title = "Savings Account"
                        userImageView.setImageResource(R.drawable.ic_savings_challenge)
                    } else {
                        // TODO: handle wrong state
                    }
                }
                BasicTransactionResponseModel.TRANSACTION_TYPE_SAVINGS_TO_PERSONAL -> {
                    if (transaction.isMe) {
                        title = "Savings Account"
                        userImageView.setImageResource(R.drawable.ic_savings_challenge)
                        amountColor = Color.parseColor("#41cb79") // Green
                    } else {
                        // TODO: handle wrong state
                    }
                }
                BasicTransactionResponseModel.TRANSACTION_TYPE_CREDIT_TO_EXTERNAL -> {
                    val external = transaction.externalSourceModel
                    if (transaction.isMe) {
                        when (external.type) {
                            ExternalSourceModel.SOURCE_TYPE_VPA -> {
                                title = external.vpa.getName()
                                external.vpa.loadVpaImage(baseActivity, userImageView)
                                userImageView.setOnClickListener(null)
                            }
                            ExternalSourceModel.SOURCE_TYPE_MERCHANT -> {
                                title = external.merchant.name
                                ImageUtils.loadImage(
                                    baseActivity,
                                    external.merchant.icon,
                                    userImageView,
                                    R.drawable.ic_shop_new
                                )
                                userImageView.setOnClickListener(null)
                            }
                            else -> {
                                Toast.makeText(
                                    baseActivity,
                                    "Wrong external type : " + external.type + " in UE transaction type",
                                    Toast.LENGTH_SHORT
                                ).show()
                                return
                            }
                        }
                    } else {
                        // Not Possible
                        Toast.makeText(
                            baseActivity,
                            "Wrong type CE, !transaction.isMe",
                            Toast.LENGTH_SHORT
                        ).show()
                        return
                    }
                    isAmountCredited = false
                    amountColor = Color.parseColor("#FFFCFC") // White
                }
                BasicTransactionResponseModel.TRANSACTION_TYPE_EXTERNAL_TO_CREDIT -> {
                    when (transaction.externalSourceModel.type) {
                        ExternalSourceModel.SOURCE_TYPE_UPI_APP,
                        ExternalSourceModel.SOURCE_TYPE_NETBANKING,
                        ExternalSourceModel.SOURCE_TYPE_SAVED_CARD,
                        ExternalSourceModel.SOURCE_TYPE_CARD -> {
                            title = transaction.createdBy.name()
                            ImageUtils.loadImage(
                                baseActivity,
                                transaction.createdBy.avatar,
                                userImageView,
                                true,
                                transaction.createdBy.firstName
                            )
                            userImageView.setOnClickListener {
                                baseActivity.navigateToUserProfile(
                                    transaction.createdBy.username,
                                    Source.TXN_CARD
                                )
                            }
                        }
                        ExternalSourceModel.SOURCE_TYPE_VPA -> {
                            if (transaction.mode.equals(BasicTransactionResponseModel.MODE_UPI)) {
                                title = transaction.externalSourceModel.vpa.getName()
                                transaction.externalSourceModel.vpa.loadVpaImage(
                                    baseActivity,
                                    userImageView
                                )
                            } else {
                                title = transaction.createdBy.name()
                                ImageUtils.loadImage(
                                    baseActivity,
                                    transaction.createdBy.avatar,
                                    userImageView,
                                    true,
                                    transaction.createdBy.firstName
                                )
                                userImageView.setOnClickListener {
                                    baseActivity.navigateToUserProfile(transaction.createdBy.username, Source.TXN_CARD)
                                }
                            }
                        }
                        ExternalSourceModel.SOURCE_TYPE_MERCHANT -> {
                            title = transaction.externalSourceModel.merchant.name
                            ImageUtils.loadImage(
                                baseActivity,
                                transaction.externalSourceModel.merchant.icon,
                                userImageView,
                                R.drawable.ic_shop_new
                            )
                            userNameTextView.setOnClickListener(null)
                        }
                    }
                    ViewUtils.setupAmountText(
                        baseActivity,
                        amountTextView,
                        null,
                        "₹",
                        "${transaction.amount / 100f}",
                        transaction.getColorByStatus(baseActivity)
                    )
                }
                BasicTransactionResponseModel.TRANSACTION_TYPE_USER_TO_CREDIT -> {
                    if (transaction.isMe) {
                        title = "Credit Account"
                        ViewUtils.setupAmountText(
                            baseActivity,
                            amountTextView,
                            "- ",
                            "₹",
                            "${transaction.amount / 100f}",
                            Color.BLACK
                        )
                    } else {
                        // Wrong State
                        Toast.makeText(
                            baseActivity,
                            "Wrong type, !transaction.isMe",
                            Toast.LENGTH_SHORT
                        ).show()
                        return
                    }
                    userImageView.setImageResource(R.drawable.ic_credit_load)
                }
                BasicTransactionResponseModel.TRANSACTION_TYPE_EXTERNAL_TO_EXTERNAL -> {
                    isAmountCredited = false
                    transaction.externalSourceModel?.let {
                        when (it.type) {
                            ExternalSourceModel.SOURCE_TYPE_VPA -> {
                                title = it.vpa.getName()
                                it.vpa.loadVpaImage(baseActivity, userImageView)
                            }
                            ExternalSourceModel.SOURCE_TYPE_BANK_ACCOUNT -> {
                                title = it.bankAccountModel.accountHolderName
                                userImageView.setImageResource(R.drawable.ic_bank_new)
                            }
                            ExternalSourceModel.SOURCE_TYPE_MERCHANT -> {
                                title = it.merchant.name
                                ImageUtils.loadImage(
                                    baseActivity,
                                    it.merchant.icon,
                                    userImageView,
                                    R.drawable.ic_shop_new
                                )
                            }
                            ExternalSourceModel.SOURCE_TYPE_UPI_APP -> {
                                title = it.upiAppModel.appName
                                userImageView.setImageResource(R.drawable.ic_upi_icon)
                            }
                            ExternalSourceModel.SOURCE_TYPE_CARD -> {
                                title = "${it.cardModel.network}:${it.cardModel.last4}"
                                userImageView.setImageResource(R.drawable.ic_card)
                            }
                            ExternalSourceModel.SOURCE_TYPE_SAVED_CARD -> {
                                title =
                                    "${it.savedCardModel.network}:${it.savedCardModel.maskedCard}"
                                userImageView.setImageResource(R.drawable.ic_card)
                            }
                            ExternalSourceModel.SOURCE_TYPE_NETBANKING -> {
                                title = it.netBankingModel.bankName
                                userImageView.setImageResource(R.drawable.ic_bank_new)
                            }
                        }
                    }
                }
            }
Collapse
 This snippet was truncated for display; see it in full



17:55
    public static final String TRANSACTION_TYPE_USER_TO_USER = "UU";
    public static final String TRANSACTION_TYPE_SELF_TO_FAM = "SF";
    public static final String TRANSACTION_TYPE_FAM_TO_USER = "FU";
    public static final String TRANSACTION_TYPE_FAM_TO_SELF = "FS";
    public static final String TRANSACTION_TYPE_FAM_TO_SELF_BY_APPROVAL = "FA";
    public static final String TRANSACTION_TYPE_USER_TO_EXTERNAL = "UE";
    public static final String TRANSACTION_TYPE_EXTERNAL_TO_USER = "EU";
    public static final String TRANSACTION_TYPE_FAM_TO_EXTERNAL = "FE";
    public static final String TRANSACTION_TYPE_EXTERNAL_TO_FAM = "EF";
    public static final String TRANSACTION_TYPE_PERSONAL_TO_SAVINGS = "UG";
    public static final String TRANSACTION_TYPE_FAM_TO_SAVINGS = "FV";
    public static final String TRANSACTION_TYPE_SAVINGS_TO_PERSONAL = "SU";
    public static final String TRANSACTION_TYPE_SAVINGS_TO_EXTERNAL = "SE";
    public static final String TRANSACTION_TYPE_EXTERNAL_TO_EXTERNAL = "EE";
    public static final String TRANSACTION_TYPE_CREDIT_TO_EXTERNAL = "CE";
    public static final String TRANSACTION_TYPE_EXTERNAL_TO_CREDIT = "EC";
    public static final String TRANSACTION_TYPE_USER_TO_CREDIT = "UC";

    public static final int STATUS_PENDING = 1;
    public static final int STATUS_SUCCESS = 2;
    public static final int STATUS_FAILED = 3;
    public static final int STATUS_REFUNDED = 4;
    public static final int STATUS_PROCESSING = 5;
    public static final int STATUS_TERMINATED = 6;
    public static final int STATUS_REVERSED = 7;
    public static final int STATUS_EXTERNAL_PROCESSING = 8;
    public static final int STATUS_ON_HOLD = 9;
    public static final int STATUS_PROCESSED = 10;
17:55
    public static final String MODE_P2P = "P2P";
    public static final String MODE_SELF_P2P = "SP2P";
    public static final String MODE_P2M = "P2M";
    public static final String MODE_WALLET_LOAD = "WL";
    public static final String MODE_PAYOUT = "PO";
    public static final String MODE_REVERSAL = "REV";
    public static final String MODE_REWARDS = "RWD";
    public static final String MODE_UPI = "UC";
    public static final String MODE_UPI_CREDIT_REVERSAL = "UCR";
    public static final String MODE_SURCHARGE = "SC";


paaji
  14:26

    public static final String SOURCE_TYPE_VPA = "vpa";
    public static final String SOURCE_TYPE_UPI_APP = "upi_app";
    public static final String SOURCE_TYPE_CARD = "card";
    public static final String SOURCE_TYPE_SAVED_CARD = "saved_card";
    public static final String SOURCE_TYPE_NETBANKING = "netbanking";
    public static final String SOURCE_TYPE_BANK_ACCOUNT = "account";
    public static final String SOURCE_TYPE_MERCHANT = "merchant";